<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>apollo&#39;s blog</title>
    <link>https://Apollo2light.github.io/Apollo2light/</link>
    <description>Recent content on apollo&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 26 Apr 2022 19:01:11 +0800</lastBuildDate>
    
	<atom:link href="https://Apollo2light.github.io/Apollo2light/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2.git原理</title>
      <link>https://Apollo2light.github.io/Apollo2light/tools/2.git%E5%8E%9F%E7%90%86/</link>
      <pubDate>Tue, 26 Apr 2022 19:01:11 +0800</pubDate>
      
      <guid>https://Apollo2light.github.io/Apollo2light/tools/2.git%E5%8E%9F%E7%90%86/</guid>
      <description>1.分布式版本控制系统 1.1 本质 git是分布式版本控制系统，它与集中式版本控制的本质区别是：
 分布式：客户端并不只提取最新版本的文件快照， 而是把代码仓库完整地镜像下来，包括完整的历史记录 集中式：客户端只提取最新版本的文件快照，不包括完整的历史记录  1.2 配置  /etc/gitconfig 文件：系统级别，git config –system对当前操作系统所有用户生效 ~/.gitconfig 文件：用户级别，git config –global 对当前操作系统该用户生效 .git/config 文件：当前文件级别，git config –local仅针对当前项目有效  git config —list #配置列表 git config --global user.name #用户名 git config --global user.email #用户邮箱 1.3 分区 对于任何一个文件，在 Git 内都只有三种状态：
 已提交（committed）：该文件已经被安全地保存在本地数据库中了 已修改（modified）：修改了某个文件 已暂存（staged）：已修改的文件放在下次提交时要保存的清单中  因此可以看到 Git 管理项目时，文件流转的三个区域：
 工作目录：编辑代码 暂存区域：完成编辑但未提交 本地仓库：.git目录，存放数据和修改信息  HEAD：指向当前所处分支 description：仅供 GitWeb 程序使用，无需关心 info/：全局性排除文件 config：配置文件 hooks/：客户端或服务端的钩子脚本 index：暂存区信息 objects/：所有存储的数据 refs/：存储指向数据（分支、远程仓库和标签等)的提交对象的指针    2.</description>
    </item>
    
    <item>
      <title>1.git配置多账号</title>
      <link>https://Apollo2light.github.io/Apollo2light/tools/1.git%E9%85%8D%E7%BD%AE%E5%A4%9A%E8%B4%A6%E5%8F%B7/</link>
      <pubDate>Tue, 26 Apr 2022 18:25:43 +0800</pubDate>
      
      <guid>https://Apollo2light.github.io/Apollo2light/tools/1.git%E9%85%8D%E7%BD%AE%E5%A4%9A%E8%B4%A6%E5%8F%B7/</guid>
      <description>1.单客户端多账号 1.1 问题描述 单个客户端如何管理 多个账号在多个代码托管平台的代码拉取推送？
 a用户  github.come gitee.com   b用户  github.com gitee.com    1.2 解决方案  1.本地生成多个账号对应不同平台的ssh公私钥 2.将公钥部署到对应平台 3.本地拉取推送  1.2.1 生成公私钥 #进入公私钥配置地址 cd ~/.ssh/ #生成公私钥,ed25519为生成时使用的算法 ssh-keygen -t ed25519 -C &amp;#34;a@qq.com&amp;#34; ssh-keygen -t ed25519 -C &amp;#34;b@qq.com&amp;#34; #添加到ssh-agent，加快速度 eval &amp;#34;$(ssh-agent -s)&amp;#34; ssh-add -K ~/.ssh/id_a_ed25519 ssh-add -K ~/.ssh/id_b_ed25519 #配置访问时不同用户对应的私钥 vim config #======================== #github gaoyakang Host gaoyakang.github.com HostName github.com IdentityFile ~/.ssh/id_306_ed25519 user git #github apollo Host Apollo2light.github.com HostName github.</description>
    </item>
    
  </channel>
</rss>