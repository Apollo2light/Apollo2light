<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tools on Apollo&#39;s blog</title>
    <link>https://Apollo2light.github.io/Apollo2light/tools/</link>
    <description>Recent content in Tools on Apollo&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 29 Apr 2022 02:33:28 +0800</lastBuildDate>
    
	<atom:link href="https://Apollo2light.github.io/Apollo2light/tools/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>4.mac终端配置</title>
      <link>https://Apollo2light.github.io/Apollo2light/tools/4.mac%E7%BB%88%E7%AB%AF%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Fri, 29 Apr 2022 02:33:28 +0800</pubDate>
      
      <guid>https://Apollo2light.github.io/Apollo2light/tools/4.mac%E7%BB%88%E7%AB%AF%E9%85%8D%E7%BD%AE/</guid>
      <description>1.终端 0.iTerm2是默认终端的替代品，oh-my-zsh是为了简化zsh的配置的shell
1.查看所有shell
cat /etc/shells 2.默认shell
新版zsh默认zsh：echo $SHELL 更换默认shell：chsh -s /bin/zsh 3.配置文件
#所有命令失效： export PATH=/usr/bin:/usr/sbin:/bin:/sbin:/usr/X11R6/bin - a. /etc/profile - b. /etc/paths - c. ~/.bash_profile - d. ~/.bash_login - e. ~/.profile - f. ~/.bashrc(启动终端自动加载) 2.配置环境变量 Mac的usr/bin目录是不允许增删文件的，可以通过向usr/local/bin增删文件来实现在终端里直接运行
#移动软件 sudo mv -f 文件名 /usr/local #添加变量 sudo vim /etc/profile # maven环境变 MAVEN_HOME=&amp;#34;/usr/local/apache-maven-3.8.4&amp;#34; export MAVEN_HOME export PATH=${PATH}:${MAVEN_HOME}/bin source /etc/profile 3.快捷键 1.截图：Command + Shift + 4 2.录屏：Command + Shift + 5 4.常用命令 改主机名: hostnamectl set-hostname npm换源: npm config set registry https://registry.</description>
    </item>
    
    <item>
      <title>3.git博客</title>
      <link>https://Apollo2light.github.io/Apollo2light/tools/3.git%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Fri, 29 Apr 2022 02:30:57 +0800</pubDate>
      
      <guid>https://Apollo2light.github.io/Apollo2light/tools/3.git%E5%8D%9A%E5%AE%A2/</guid>
      <description>0.技术  hugo：生成站点 github pages：静态托管 picgo：存图  1.步骤  1.申请GitHub账号并配置ssh 2.brew安装hugo后选择主题 3.熟悉常见hugo指令 4.GitHub pages部署博客  2.指令 #安装hugo brew install hugo #新建站点 hugo new site xx #添加主题 cd xx git clone https://github.com/rmsubekti/the-roots-home.git themes/the-roots-home hugo server -t the-roots-home --buildDrafts #打包 hugo --theme=the-roots-home --baseUrl=&amp;#34;https://Apollo2light.github.io&amp;#34; --buildDrafts 3.写博客 #新建页面 cd apo_blog hugo new xx/xx.md #编写内容 code #打包 hugo --theme=the-roots-home --baseUrl=&amp;#34;https://Apollo2light.github.io/Apollo2light/&amp;#34; --buildDrafts #将打包好的public内容复制到apollo_blog #上传到apollo仓库 git add . git config --local user.name &amp;#39;Apollo2light&amp;#39; git config --local user.email &amp;#39;2141975795@qq.</description>
    </item>
    
    <item>
      <title>2.git多账号</title>
      <link>https://Apollo2light.github.io/Apollo2light/tools/2.git%E5%A4%9A%E8%B4%A6%E5%8F%B7/</link>
      <pubDate>Fri, 29 Apr 2022 02:30:38 +0800</pubDate>
      
      <guid>https://Apollo2light.github.io/Apollo2light/tools/2.git%E5%A4%9A%E8%B4%A6%E5%8F%B7/</guid>
      <description>0.使用 使用的都是ssh协议
git clone git@Apollo2light.github.com:Apollo2light/Apollo2light.git 1.单客户端多账号 1.1 问题描述 单个客户端如何管理 多个账号在多个代码托管平台的代码拉取推送？
 a用户  github.come gitee.com   b用户  github.com gitee.com    1.2 解决方案  1.本地生成多个账号对应不同平台的ssh公私钥 2.将公钥部署到对应平台 3.本地拉取推送  1.2.1 生成公私钥 #进入公私钥配置地址 cd ~/.ssh/ #生成公私钥,ed25519为生成时使用的算法 ssh-keygen -t ed25519 -C &amp;#34;a@qq.com&amp;#34; ssh-keygen -t ed25519 -C &amp;#34;b@qq.com&amp;#34; #添加到ssh-agent，加快速度 eval &amp;#34;$(ssh-agent -s)&amp;#34; ssh-add -K ~/.ssh/id_a_ed25519 ssh-add -K ~/.ssh/id_b_ed25519 #配置访问时不同用户对应的私钥 vim config #======================== #github gaoyakang Host gaoyakang.github.com HostName github.com IdentityFile ~/.ssh/id_306_ed25519 user git #github apollo Host Apollo2light.</description>
    </item>
    
    <item>
      <title>1.git学习</title>
      <link>https://Apollo2light.github.io/Apollo2light/tools/1.git%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Fri, 29 Apr 2022 02:29:45 +0800</pubDate>
      
      <guid>https://Apollo2light.github.io/Apollo2light/tools/1.git%E5%AD%A6%E4%B9%A0/</guid>
      <description>0.必知 学习git就3点：分区，分支与远程。
1.分布式版本控制系统 1.1 本质 git是分布式版本控制系统，它与集中式版本控制的本质区别是：
 分布式：客户端并不只提取最新版本的文件快照， 而是把代码仓库完整地镜像下来，包括完整的历史记录 集中式：客户端只提取最新版本的文件快照，不包括完整的历史记录  1.2 配置  /etc/gitconfig 文件：系统级别，git config –system对当前操作系统所有用户生效 ~/.gitconfig 文件：用户级别，git config –global 对当前操作系统该用户生效 .git/config 文件：当前文件级别，git config –local仅针对当前项目有效  git config —list #配置列表 git config --global user.name #用户名 git config --global user.email #用户邮箱 1.3 分区 对于任何一个文件，在 Git 内都只有三种状态：
 已提交（committed）：该文件已经被安全地保存在本地数据库中了 已修改（modified）：修改了某个文件 已暂存（staged）：已修改的文件放在下次提交时要保存的清单中  因此可以看到 Git 管理项目时，文件流转的三个区域：
 工作目录：编辑代码 暂存区域：完成编辑但未提交 本地仓库：.git目录，存放数据和修改信息  HEAD：指向当前所处分支 description：仅供 GitWeb 程序使用，无需关心 info/：全局性排除文件 config：配置文件 hooks/：客户端或服务端的钩子脚本 index：暂存区信息 objects/：所有存储的数据 refs/：存储指向数据（分支、远程仓库和标签等)的提交对象的指针    2.</description>
    </item>
    
  </channel>
</rss>